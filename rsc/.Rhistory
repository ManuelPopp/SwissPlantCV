}
predict_relation(models = models, data_full = data, variable = "tasmean")
## Predict variable while holding other variables constant
predict_relation <- function(models, data_full, variable) {
n_pred <- 50
variable_range <- stats::quantile(
data_full[, variable],
probs = c(0.1, 0.9),
na.rm = TRUE
)
vals <- seq(
from = variable_range[1],
to = variable_range[2],
length.out = n_pred
)
df_pred <- data.frame(
apply(
X = data_full,
MARGIN = 2,
FUN = function(x){return(rep(median(x), n_pred))}
)
)
df_pred[, variable] <- vals
predictions <- lapply(X = models, stats::predict, newdata = df_pred)
prediction_df <- as.data.frame(do.call(rbind, predictions))
prediction_df$predictor <- rep(vals, length(models))
prediction_df$iteration <- rep(1:length(models), each = length(vals))
return(prediction_df)
}
predict_relation(models = models, data_full = data, variable = "tasmean")
n_pred <- 50
variable_range <- stats::quantile(
data_full[, variable],
probs = c(0.1, 0.9),
na.rm = TRUE
)
vals <- seq(
from = variable_range[1],
to = variable_range[2],
length.out = n_pred
)
df_pred <- data.frame(
apply(
X = data_full,
MARGIN = 2,
FUN = function(x){return(rep(median(x), n_pred))}
)
)
df_pred[, variable] <- vals
variable
variable = "tasmean"
n_pred <- 50
variable_range <- stats::quantile(
data_full[, variable],
probs = c(0.1, 0.9),
na.rm = TRUE
)
vals <- seq(
from = variable_range[1],
to = variable_range[2],
length.out = n_pred
)
df_pred <- data.frame(
apply(
X = data_full,
MARGIN = 2,
FUN = function(x){return(rep(median(x), n_pred))}
)
)
df_pred[, variable] <- vals
predictions <- lapply(X = models, stats::predict, newdata = df_pred)
predictions[[1]]
prediction_df <- as.data.frame(do.call(rbind, as.numeric(predictions)))
predictions
prediction_df <- as.data.frame(do.call(rbind, t(predictions)))
prediction_df
prediction_df <- as.data.frame(do.call(rbind, predictions))
prediction_df
prediction_df <- as.data.frame(do.call(cbind, predictions))
prediction_df <- as.data.frame(do.call(rbind, predictions))
prediction_df
prediction_df <- as.data.frame(do.call(cbind, predictions))
prediction_df <- as.data.frame(t(do.call(cbind, predictions)))
prediction_df
nrow(prediction_df)
prediction_df <- as.data.frame(do.call(cbind, predictions))
nrow(prediction_df)
prediction_df
predictions <- lapply(X = models, stats::predict, newdata = df_pred)
prediction_df <- as.data.frame(do.call(cbind, predictions))
prediction_df
prediction_df$predictor <- vals
prediction_df
prediction_df$predictor_value <- vals
## Predict variable while holding other variables constant
predict_relation <- function(models, data_full, variable) {
n_pred <- 50
variable_range <- stats::quantile(
data_full[, variable],
probs = c(0.1, 0.9),
na.rm = TRUE
)
vals <- seq(
from = variable_range[1],
to = variable_range[2],
length.out = n_pred
)
df_pred <- data.frame(
apply(
X = data_full,
MARGIN = 2,
FUN = function(x){return(rep(median(x), n_pred))}
)
)
df_pred[, variable] <- vals
predictions <- lapply(X = models, stats::predict, newdata = df_pred)
prediction_df <- as.data.frame(do.call(cbind, predictions))
prediction_df$predictor_value <- vals
return(prediction_df)
}
?reshape2::melt
predicted <- predict_relation(
models = models, data_full = data, variable = "tasmean"
) %>%
tidyr::pivot_longer(
cols = -predictor_value,
names_to = "iteration", values_to = "predicted_value"
) %>%
dplyr::group_by(predictor_value) %>%
dplyr::summarise(
median = median(value, na.rm = TRUE),
p5 = quantile(value, 0.05, na.rm = TRUE),
p95 = quantile(value, 0.95, na.rm = TRUE)
)
predicted <- predict_relation(
models = models, data_full = data, variable = "tasmean"
) %>%
tidyr::pivot_longer(
cols = -predictor_value,
names_to = "iteration", values_to = "predicted_value"
) %>%
dplyr::group_by(predictor_value) %>%
dplyr::summarise(
median = median(predicted_value, na.rm = TRUE),
p5 = quantile(predicted_value, 0.05, na.rm = TRUE),
p95 = quantile(predicted_value, 0.95, na.rm = TRUE)
)
predicted
## Model response curves
modelled_response <- function(model_list, data, variable) {
predict_relation(
models = model_list, data_full = data, variable = variable
) %>%
tidyr::pivot_longer(
cols = -predictor_value,
names_to = "iteration", values_to = "predicted_value"
) %>%
dplyr::group_by(predictor_value) %>%
dplyr::summarise(
median = median(predicted_value, na.rm = TRUE),
p5 = quantile(predicted_value, 0.05, na.rm = TRUE),
p95 = quantile(predicted_value, 0.95, na.rm = TRUE)
)
}
pred <- "tasmean"
resp <- modelled_response(model_list = models, data = data, variable = pred)
resp
ggplot2::ggplot(data = resp, ggplot2::aes(x = predictor_value)) +
ggplot2::geom_ribbon(ggplot2::aes(ymin = p5, ymax = p95), fill = "red", alpha = 0.5) +
ggplot2::geom_line(ggplot2::aes(y = median), colour = "red", linewidth = 1)
ggplot2::ggplot(data = resp, ggplot2::aes(x = predictor_value)) +
ggplot2::geom_ribbon(
ggplot2::aes(ymin = p5, ymax = p95),
fill = "red",
alpha = 0.5
) +
ggplot2::geom_line(
ggplot2::aes(y = median),
colour = "red",
linewidth = 1
) +
ggplot2::theme_bw()
pred <- "vpdmax"
resp <- modelled_response(model_list = models, data = data, variable = pred)
ggplot2::ggplot(data = resp, ggplot2::aes(x = predictor_value)) +
ggplot2::geom_ribbon(
ggplot2::aes(ymin = p5, ymax = p95),
fill = "red",
alpha = 0.5
) +
ggplot2::geom_line(
ggplot2::aes(y = median),
colour = "red",
linewidth = 1
) +
ggplot2::theme_bw()
pred <- "swb"
resp <- modelled_response(model_list = models, data = data, variable = pred)
ggplot2::ggplot(data = resp, ggplot2::aes(x = predictor_value)) +
ggplot2::geom_ribbon(
ggplot2::aes(ymin = p5, ymax = p95),
fill = "red",
alpha = 0.5
) +
ggplot2::geom_line(
ggplot2::aes(y = median),
colour = "red",
linewidth = 1
) +
ggplot2::theme_bw()
pred <- "tasmax"
sub("max", "[max]", pred)
expression(sub("max", "[max]", pred))
xlabel <- expression(
sub("min", "[min]", sub("mean", "[mean]", sub("max", "[max]", pred)))
)
ggplot2::ggplot(data = resp, ggplot2::aes(x = predictor_value)) +
ggplot2::geom_ribbon(
ggplot2::aes(ymin = p5, ymax = p95),
fill = "red",
alpha = 0.5
) +
ggplot2::geom_line(
ggplot2::aes(y = median),
colour = "red",
linewidth = 1
) +
ggplot2::xlab(xlabel) +
ggplot2::theme_bw()
xlabel <- expression(
eval(sub("min", "[min]", sub("mean", "[mean]", sub("max", "[max]", pred))))
)
xlabel
xlabel <- expression(
parse(text = sub("min", "[min]", sub("mean", "[mean]", sub("max", "[max]", pred))))
)
xlabel
xlabel <- parse(
text = sub("min", "[min]", sub("mean", "[mean]", sub("max", "[max]", pred)))
)
xlabel
ggplot2::ggplot(data = resp, ggplot2::aes(x = predictor_value)) +
ggplot2::geom_ribbon(
ggplot2::aes(ymin = p5, ymax = p95),
fill = "red",
alpha = 0.5
) +
ggplot2::geom_line(
ggplot2::aes(y = median),
colour = "red",
linewidth = 1
) +
ggplot2::xlab(xlabel) +
ggplot2::theme_bw()
xlabel <- parse(
text = sub("MIN", "[min]", sub("MEAN", "[mean]", sub("MAX", "[max]", toupper(pred))))
)
resp <- modelled_response(model_list = models, data = data, variable = pred)
ggplot2::ggplot(data = resp, ggplot2::aes(x = predictor_value)) +
ggplot2::geom_ribbon(
ggplot2::aes(ymin = p5, ymax = p95),
fill = "red",
alpha = 0.5
) +
ggplot2::geom_line(
ggplot2::aes(y = median),
colour = "red",
linewidth = 1
) +
ggplot2::xlab(xlabel) +
ggplot2::theme_bw()
resp <- modelled_response(model_list = models, data = data, variable = pred)
pred <- "tasmean"
xlabel <- parse(
text = sub("MIN", "[min]", sub("MEAN", "[mean]", sub("MAX", "[max]", toupper(pred))))
)
resp <- modelled_response(model_list = models, data = data, variable = pred)
ggplot2::ggplot(data = resp, ggplot2::aes(x = predictor_value)) +
ggplot2::geom_ribbon(
ggplot2::aes(ymin = p5, ymax = p95),
fill = "red",
alpha = 0.5
) +
ggplot2::geom_line(
ggplot2::aes(y = median),
colour = "red",
linewidth = 1
) +
ggplot2::xlab(xlabel) +
ggplot2::theme_bw()
?predict
?predict.gam
## Predict variable while holding other variables constant
predict_relation <- function(models, data_full, variable) {
n_pred <- 50
variable_range <- stats::quantile(
data_full[, variable],
probs = c(0.1, 0.9),
na.rm = TRUE
)
vals <- seq(
from = variable_range[1],
to = variable_range[2],
length.out = n_pred
)
df_pred <- data.frame(
apply(
X = data_full,
MARGIN = 2,
FUN = function(x){return(rep(median(x), n_pred))}
)
)
df_pred[, variable] <- vals
predictions <- lapply(
X = models, stats::predict, newdata = df_pred, type = "response"
)
prediction_df <- as.data.frame(do.call(cbind, predictions))
prediction_df$predictor_value <- vals
return(prediction_df)
}
## Model response curves
modelled_response <- function(model_list, data, variable) {
predict_relation(
models = model_list, data_full = data, variable = variable
) %>%
tidyr::pivot_longer(
cols = -predictor_value,
names_to = "iteration", values_to = "predicted_value"
) %>%
dplyr::group_by(predictor_value) %>%
dplyr::summarise(
median = median(predicted_value, na.rm = TRUE),
p5 = quantile(predicted_value, 0.05, na.rm = TRUE),
p95 = quantile(predicted_value, 0.95, na.rm = TRUE)
)
}
resp <- modelled_response(model_list = models, data = data, variable = pred)
ggplot2::ggplot(data = resp, ggplot2::aes(x = predictor_value)) +
ggplot2::geom_ribbon(
ggplot2::aes(ymin = p5, ymax = p95),
fill = "red",
alpha = 0.5
) +
ggplot2::geom_line(
ggplot2::aes(y = median),
colour = "red",
linewidth = 1
) +
ggplot2::xlab(xlabel) +
ggplot2::theme_bw()
ggplot2::ggplot(data = resp, ggplot2::aes(x = predictor_value)) +
ggplot2::geom_ribbon(
ggplot2::aes(ymin = p5, ymax = p95),
fill = "red",
alpha = 0.5
) +
ggplot2::geom_line(
ggplot2::aes(y = median),
colour = "red",
linewidth = 1
) +
ggplot2::xlab(xlabel) +
ggplot2::ylab("Fire probability") +
ggplot2::theme_bw()
predictors
predictors
plots <- list()
for (i in 1:length(predictors)) {
pred <- predictors[i]
col <- c("orange3", "royalblue3", "violetred3", "firebrick3", "cyan3")[i]
xlabel <- parse(
text = sub(
"MIN", "[min]", sub("MEAN", "[mean]", sub("MAX", "[max]", toupper(pred)))
)
)
resp <- modelled_response(model_list = models, data = data, variable = pred)
plots[[pred]] <- ggplot2::ggplot(
data = resp, ggplot2::aes(x = predictor_value)
) +
ggplot2::geom_ribbon(
ggplot2::aes(ymin = p5, ymax = p95),
fill = col,
alpha = 0.5
) +
ggplot2::geom_line(
ggplot2::aes(y = median),
colour = col,
linewidth = 1
) +
ggplot2::xlab(xlabel) +
ggplot2::ylab("Fire probability") +
ggplot::ylim(c(0, 1)) +
ggplot2::theme_bw()
}
plots <- list()
for (i in 1:length(predictors)) {
pred <- predictors[i]
col <- c("orange3", "royalblue3", "violetred3", "firebrick3", "cyan3")[i]
xlabel <- parse(
text = sub(
"MIN", "[min]", sub("MEAN", "[mean]", sub("MAX", "[max]", toupper(pred)))
)
)
resp <- modelled_response(model_list = models, data = data, variable = pred)
plots[[pred]] <- ggplot2::ggplot(
data = resp, ggplot2::aes(x = predictor_value)
) +
ggplot2::geom_ribbon(
ggplot2::aes(ymin = p5, ymax = p95),
fill = col,
alpha = 0.5
) +
ggplot2::geom_line(
ggplot2::aes(y = median),
colour = col,
linewidth = 1
) +
ggplot2::xlab(xlabel) +
ggplot2::ylab("Fire probability") +
ggplot2::ylim(c(0, 1)) +
ggplot2::theme_bw()
}
?grid.arrange
do.call(plots, gridExtra::grid.arrange, ncol = 2)
do.call(plots, gridExtra::grid.arrange)
do.call(gridExtra::grid.arrange, plots)
## Predict variable while holding other variables constant
predict_relation <- function(models, data_full, variable) {
n_pred <- 200
variable_range <- stats::quantile(
data_full[, variable],
probs = c(0.1, 0.9),
na.rm = TRUE
)
vals <- seq(
from = variable_range[1],
to = variable_range[2],
length.out = n_pred
)
df_pred <- data.frame(
apply(
X = data_full,
MARGIN = 2,
FUN = function(x){return(rep(median(x), n_pred))}
)
)
df_pred[, variable] <- vals
predictions <- lapply(
X = models, stats::predict, newdata = df_pred, type = "response"
)
prediction_df <- as.data.frame(do.call(cbind, predictions))
prediction_df$predictor_value <- vals
return(prediction_df)
}
## Model response curves
modelled_response <- function(model_list, data, variable) {
predict_relation(
models = model_list, data_full = data, variable = variable
) %>%
tidyr::pivot_longer(
cols = -predictor_value,
names_to = "iteration", values_to = "predicted_value"
) %>%
dplyr::group_by(predictor_value) %>%
dplyr::summarise(
median = median(predicted_value, na.rm = TRUE),
p5 = quantile(predicted_value, 0.05, na.rm = TRUE),
p95 = quantile(predicted_value, 0.95, na.rm = TRUE)
)
}
plots <- list()
for (i in 1:length(predictors)) {
pred <- predictors[i]
col <- c("orange3", "royalblue3", "violetred3", "firebrick3", "cyan3")[i]
xlabel <- parse(
text = sub(
"MIN", "[min]", sub("MEAN", "[mean]", sub("MAX", "[max]", toupper(pred)))
)
)
resp <- modelled_response(model_list = models, data = data, variable = pred)
plots[[pred]] <- ggplot2::ggplot(
data = resp, ggplot2::aes(x = predictor_value)
) +
ggplot2::geom_ribbon(
ggplot2::aes(ymin = p5, ymax = p95),
fill = col,
alpha = 0.5
) +
ggplot2::geom_line(
ggplot2::aes(y = median),
colour = col,
linewidth = 1
) +
ggplot2::xlab(xlabel) +
ggplot2::ylab("Fire probability") +
ggplot2::ylim(c(0, 1)) +
ggplot2::theme_bw()
}
do.call(gridExtra::grid.arrange, plots)
gridded_plot <- do.call(gridExtra::grid.arrange, plots)
ggplot2::ggsave(
filename = file.path(dir_main, "fig", "Modelled_responses.pdf"),
plot = gridded_plot,
height = 1200,
width = 800
)
ggplot2::ggsave(
filename = file.path(dir_main, "fig", "Modelled_responses.pdf"),
plot = gridded_plot,
height = 12,
width = 8
)
