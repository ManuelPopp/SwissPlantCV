#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu May 11 10:36:18 2023

Predict taxon names using the local version of the FlorID CV model.
"""
__author__ = "Manuel"
__date__ = "Thu May 11 10:36:18 2023"
__credits__ = ["Manuel R. Popp"]
__license__ = "Unlicense"
__version__ = "1.0.1"
__maintainer__ = "Manuel R. Popp"
__email__ = "requests@cdpopp.de"
__status__ = "Development"

#-----------------------------------------------------------------------------|
# Imports
import os, platform, subprocess, json
os.chdir(os.path.dirname(os.path.realpath(__file__)))

import base

#-----------------------------------------------------------------------------|
# Settings
OS = platform.system()#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed May 17 08:28:07 2023
"""
__author__ = "Manuel"
__date__ = "Wed May 17 08:28:07 2023"
__credits__ = ["Manuel R. Popp"]
__license__ = "Unlicense"
__version__ = "1.0.1"
__maintainer__ = "Manuel R. Popp"
__email__ = "requests@cdpopp.de"
__status__ = "Development"

#-----------------------------------------------------------------------------|
# Imports
import os, re, platform, time, datetime
from multiprocessing.connection import Client

#-----------------------------------------------------------------------------|
# Settings
dir_scpt = os.path.dirname(__file__)
os.chdir(dir_scpt)
py_exe = "py" if platform.system() == "Windows" else "python"
STDRDADDR = 5001

#-----------------------------------------------------------------------------|
# Functions
def awake_listener(port = STDRDADDR):
    os.system("start {0} {1}/predict.py -address {2}".format(
        py_exe, dir_scpt, port
        ))

def send_single_request(image_files, coordinates, date, address = STDRDADDR):
    with Client(("localhost", address), authkey = b"Passwort") as connection:
        connection.send([
            {"Files" : image_files,
             "Coords" : coordinates,
             "Date" : re.search("\d\d\d\d-\d\d-\d\d", date)[0]
            }]
            )
        
        response = connection.recv()
        
    return response

def post_image(image_files, coordinates, date, address = STDRDADDR):
    try:
        response = send_single_request(image_files, coordinates, date, address)
    
    except:
        response = None
        i = 5
        
        while response is None and i > 0:
            print("Listener not available. Trying to wake it up...")
            awake_listener(port = address)
            time.sleep(10)
            
            print("Attempting to send request...")
            response = send_single_request(
                image_files, coordinates, date, address
                )
            
            i -= 1
    
    return response

def species_ranking(response_json, n = 5):
    species = response_json["combined"]["name"]
    
    return species[:n]

MAINFILELOC = "D:/version2" if OS == "Windows" \
    else "/media/filbe/Data-NTFS/version2"